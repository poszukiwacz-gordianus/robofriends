{"version":3,"sources":["reportWebVitals.js","components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Scroll","props","style","overflowY","border","height","children","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCGCQ,EARA,SAACC,GACd,OACE,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACGJ,EAAMK,YCSEC,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,YAAYC,IAAG,+BAA0BL,EAA1B,cACxB,gCACE,6BAAKC,IACL,4BAAIC,WCcGI,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,mCAEMA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,EAAD,CAEEV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,OAHZK,EAAOG,GAAGV,UCKhBW,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKT,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCcHI,E,kDApBb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDwB,MAAQ,CACXC,UAAU,GAHI,E,qDAOlB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG5B,WACE,OAAGG,KAAKJ,MAAMC,SACL,2DAEAG,KAAK5B,MAAMK,a,GAhBGyB,aCyDZC,G,wDAlDb,aAAc,IAAD,8BACX,gBAiBFC,eAAiB,SAACC,GAEhB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAlB1C,EAAKZ,MAAQ,CACXV,OAAQ,GACRoB,YAAa,IAEfG,QAAQC,IAAI,oBAND,E,qDAWb,WAAoB,IAAD,OACjBC,MAAM,8CACL9C,MAAK,SAAA+C,GAAQ,OAAIA,EAASC,UAC1BhD,MAAK,SAAAiD,GAAK,OAAI,EAAKb,SAAS,CAACf,OAAQ4B,OACtCL,QAAQC,IAAI,4B,oBAQd,WACE,MAAgCV,KAAKJ,MAA7BV,EAAR,EAAQA,OAAQoB,EAAhB,EAAgBA,YAChBG,QAAQC,IAAI,eAEZ,IAAMK,EAAiB7B,EAAO8B,QAAQ,SAAAC,GACpC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASb,EAAYY,kBAGvD,OAAQhC,EAAOkC,OAMX,sBAAKtC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcS,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUlB,OAAQ6B,WAV1B,gD,GAlCYb,cCAlBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B/D,M","file":"static/js/main.1f2c7bb8.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return(\n    <div style={{ overflowY: 'scroll', border: \"5px solid black\", height: '800px'}}>\n      {props.children}\n    </div>\n  )\n};\n\nexport default Scroll;\n","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return(\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robo look' src={`https://robohash.org/${id}?200x200`}/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <>\n        {\n          robots.map((user, i) => {\n            return (\n              <Card\n                key={robots[i].id}\n                id={robots[i].id}\n                name={robots[i].name}\n                email={robots[i].email}\n              />\n            );\n          })\n        }\n   </>\n  )\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return(\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info){\n    this.setState({ hasError: true})\n  }\n\n  render(){\n    if(this.state.hasError){\n      return <h1>Oooopss. That's not good.</h1>\n    } else {\n      return this.props.children\n    }\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nclass App extends Component {\n  //Creating state to comunicate beetweene atoms\n  constructor(){\n    super()\n    this.state = {\n      robots: [],\n      searchfield: '',\n    }\n    console.log('1. constructor()');\n  }\n\n  //Lifecycle hooks https://reactjs.org/docs/react-component.html\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({robots: users}));\n    console.log('2. componentDidMount()');\n  }\n\n  onSearchChange = (event) => {\n    //Update state\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render(){\n    const { robots, searchfield } = this.state;\n    console.log('3. render()');\n    //Filter robots using searchbar\n    const filteredRobots = robots.filter( robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n\n    return !robots.length ?\n      <h1>Loadnig...</h1> :\n      //Interactive searchbar\n      //         (props)          (this = App)\n      //View updated robots card\n      (\n        <div className='tc'>\n          <h1 className='f2'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}